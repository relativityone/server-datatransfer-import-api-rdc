// ----------------------------------------------------------------------------
// <copyright file="FileNotFoundImportJobTests.cs" company="kCura Corp">
//   kCura Corp (C) 2017 All Rights Reserved.
// </copyright>
// ----------------------------------------------------------------------------

namespace kCura.WinEDDS.TApi.NUnit.Integration
{
    using global::NUnit.Framework;

    using global::Relativity.Transfer.UnitTestFramework;

    /// <summary>
    /// Represents integration tests cases involving multiple clients and file not found scenarios.
    /// </summary>
    [TestFixture]
    public class FileNotFoundImportJobTests : ImportJobTestBase
    {
        /// <summary>
        /// Should import the files.
        /// </summary>
        /// <param name="forceClient">
        /// The transfer client to force.
        /// </param>
        /// <param name="workspaceWithAspera">
        /// Specify whether to use a workspace with Aspera configured.
        /// </param>
        /// <param name="disableNativeLocationValidation">
        /// Specify whether to disable native location validation.
        /// </param>
        /// <param name="disableNativeValidation">
        /// Specify whether to disable native validation.
        /// </param>
        [Test]
        [TestCase(TapiClient.Direct, false, false, true)]
        [TestCase(TapiClient.Direct, false, true, true)]
        [TestCase(TapiClient.Web, false, false, true)]
        [TestCase(TapiClient.Web, false, true, true)]
        [TestCase(TapiClient.Aspera, true, false, true)]
        [TestCase(TapiClient.Aspera, true, true, true)]
        public void ShouldFailWhenTheFileIsNotFound(
            TapiClient forceClient,
            bool workspaceWithAspera,
            bool disableNativeLocationValidation,
            bool disableNativeValidation)
        {
            const int AutoGeneratedSourceFiles = 5;

            // Intentionally provide an invalid file before adding valid ones.
            this.GivenTheDatasetPathToImport(@"C:\abcdefghijklmnop\out.txt");
            this.GivenTheAutoGeneratedDatasetToImport(AutoGeneratedSourceFiles, true);
            this.GivenTheTestInstance(TestEnvironment.OnPremisePrivateCloud);
            this.GivenTheWorkspaceId(
                workspaceWithAspera
                    ? this.TestInstance.WorkspaceIdWithAspera
                    : this.TestInstance.WorkspaceIdWithoutAspera);
            this.GivenTheImportJob();
            this.GivenTheStandardConfigSettings(forceClient, disableNativeLocationValidation, disableNativeValidation);
            this.WhenExecutingTheJob();

            if (disableNativeLocationValidation)
            {
                // When fatal, we won't get any errors.
                this.ThenTheImportJobIsNotSuccessful(0, AutoGeneratedSourceFiles + 1, true);

                // The fatal status message raises 1 progress message.
                this.ThenTheImportProgressEventsCountShouldEqual(1);
            }
            else
            {
                this.ThenTheImportJobIsNotSuccessful(1, AutoGeneratedSourceFiles + 1, false);
                this.ThenTheImportProgressEventsCountShouldEqual(AutoGeneratedSourceFiles + 1);
            }

            this.ThenTheImportMessageCountIsNonZero();
        }
    }
}