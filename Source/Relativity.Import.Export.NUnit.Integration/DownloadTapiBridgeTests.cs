// -----------------------------------------------------------------------------------------------------
// <copyright file="DownloadTapiBridgeTests.cs" company="Relativity ODA LLC">
//   © Relativity All Rights Reserved.
// </copyright>
// <summary>
//   Represents <see cref="DownloadTapiBridge"/> tests.
// </summary>
// -----------------------------------------------------------------------------------------------------

namespace Relativity.Import.Export.NUnit.Integration
{
	using System;
	using System.Net;
	using System.Threading;

	using global::NUnit.Framework;

	using Relativity.Import.Export.TestFramework;
	using Relativity.Import.Export.Transfer;
	using Relativity.Transfer;

	/// <summary>
	/// Represents <see cref="DownloadTapiBridge"/> tests.
	/// </summary>
	[TestFixture]
	[System.Diagnostics.CodeAnalysis.SuppressMessage(
		"Microsoft.Design",
		"CA1001:TypesThatOwnDisposableFieldsShouldBeDisposable",
		Justification = "The test class handles the disposal.")]
	public class DownloadTapiBridgeTests : TapiBridgeTestBase
	{
		private DownloadTapiBridge tapiBridge;

		protected override TapiBridgeBase TapiBridge => this.tapiBridge;

		[Test]
		[TestCase(TapiClient.None, false)]
		[TestCase(TapiClient.Aspera, true)]
		[TestCase(TapiClient.Aspera, false)]
		[TestCase(TapiClient.Direct, true)]
		[TestCase(TapiClient.Direct, false)]
		[Category(TestCategories.Integration)]
		[Category(TestCategories.TransferApi)]
		public void ShouldDownloadTheFiles(TapiClient client, bool preserveTimestamps)
		{
			// Note: TapiClient.Web is skipped for now because it requires a significant amount
			//       of setup and configuration.
			this.CheckSkipTest(client);
			this.GivenTheTapiClientSetting(client);
			this.GivenThePreserveFileTimestampsSetting(preserveTimestamps);
			this.GivenTheMaxFilesPerFolder(10);
			this.GivenTheNumberOfFiles(100);
			this.GivenTheAutoGeneratedDataset(
				System.IO.Path.Combine(
					System.IO.Path.Combine(
						System.IO.Path.Combine(
							this.TestParameters.FileShareUncPath,
							$"{typeof(DownloadTapiBridgeTests).Name}-{Guid.NewGuid()}"))));
			this.GivenTheTargetPath(this.TempDirectory.Directory);
			this.GivenTheNativeFileTransfer();
			this.WhenExecutingTheJob();
			this.ThenTheTapiClientShouldEqualTheRequestedType();
			this.ThenTheFilesWereTransferred();
		}

		protected override void CreateTapiBridge()
		{
			var parameters = new TapiBridgeParameters
				                 {
					                 Credentials =
						                 new NetworkCredential(
							                 this.TestParameters.RelativityUserName,
							                 this.TestParameters.RelativityPassword),
					                 FileShare = this.TestParameters.FileShareUncPath,
					                 MaxJobParallelism = 1,
					                 MaxJobRetryAttempts = 1,
					                 PreserveFileTimestamps = this.PreserveFileTimestamps,
					                 TargetPath = this.TargetPath,
					                 WaitTimeBetweenRetryAttempts = 0,
					                 WebCookieContainer = this.CookieContainer,
					                 WebServiceUrl = this.TestParameters.RelativityWebApiUrl.ToString(),
					                 WorkspaceId = this.TestParameters.WorkspaceId
				                 };

			this.SetupTapiBridgeParameters(parameters);
			this.tapiBridge = new DownloadTapiBridge(parameters, this.TransferLog, CancellationToken.None);
		}

		private void WhenExecutingTheJob()
		{
			var order = 0;
			foreach (var sourcePath in this.SourcePaths)
			{
				this.tapiBridge.AddPath(new TransferPath
				{
					Order = order,
					SourcePath = sourcePath,
					TargetPath = this.tapiBridge.TargetPath
				});
			}

			this.TapiBridge.WaitForTransferJob();
		}
	}
}