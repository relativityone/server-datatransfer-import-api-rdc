//------------------------------------------------------------------------------
// <auto-generated>
// </auto-generated>
//------------------------------------------------------------------------------

namespace Relativity.DataExchange.Service
{
	using System;
	using System.Runtime.Serialization;

	/// <summary>
	/// Represents the Relativity field information class object.
	/// </summary>
	/// <remarks>
	/// The DataMember fields MUST be used in order serialize and deserialize existing <c>.kwi|.kwx</c> setting files.
	/// </remarks>
	[DataContract]
	[Serializable]
	public class ViewFieldInfo
	{
		[DataMember]
		protected int _fieldArtifactId;

		[DataMember]
		protected int _avfId;

		[DataMember]
		protected FieldCategory _category;

		[DataMember]
		protected FieldCategory _connectorFieldCategory;

		[DataMember]
		protected string _displayName;

		[DataMember]
		protected string _avfColumnName;

		[DataMember]
		protected string _avfHeaderName;

		[DataMember]
		protected string _allowFieldName;

		[DataMember]
		protected ColumnSourceType _columnSource;

		[DataMember]
		protected string _dataSource;

		[DataMember]
		protected string _sourceFieldName;

		[DataMember]
		protected int _sourceFieldArtifactTypeID;

		[DataMember]
		protected int _sourceFieldArtifactID;

		[DataMember]
		protected int _connectorFieldArtifactID;

		[DataMember]
		protected string _sourceFieldArtifactTypeTableName;

		[DataMember]
		protected string _connectorFieldName;

		[DataMember]
		protected FieldType _fieldType;

		[DataMember]
		protected bool _isLinked;

		[DataMember]
		protected int _fieldCodeTypeID;

		[DataMember]
		protected int _artifactTypeID;

		[DataMember]
		protected string _artifactTypeTableName;

		[DataMember]
		protected bool _fieldIsArtifactBaseField;

		[DataMember]
		protected string _formatString;

		[DataMember]
		protected bool _isUnicodeEnabled;

		[DataMember, OptionalField]
		protected bool _allowHtml;

		[DataMember]
		protected int _parentFileFieldArtifactID;

		[DataMember]
		protected string _parentFileFieldDisplayName;

		[DataMember]
		protected int _associativeArtifactTypeID;

		[DataMember]
		protected string _relationalTableName;

		[DataMember]
		protected string _relationalTableColumnName;

		[DataMember]
		protected string _relationalTableColumnName2;

		// SORF-n-SOMRF fields
		[DataMember, OptionalField]
		protected ParentReflectionType _parentReflectionType;

		[DataMember, OptionalField]
		protected string _reflectedFieldArtifactTypeTableName;

		[DataMember, OptionalField]
		protected string _reflectedFieldIdentifierColumnName;

		[DataMember, OptionalField]
		protected string _reflectedFieldConnectorFieldName;

		[DataMember, OptionalField]
		protected string _reflectedConnectorIdentifierColumnName;

		[DataMember, OptionalField(VersionAdded = 1)]
		protected bool _enableDataGrid;

		[DataMember, OptionalField(VersionAdded = 2)]
		protected bool _isVirtualAssociativeArtifactType;

		public ViewFieldInfo()
		{
		}

		public ViewFieldInfo(System.Data.DataRow row)
		{
			if (row == null)
			{
				throw new ArgumentNullException(nameof(row));
			}

			this.AllowFieldName = row["AllowFieldName"].ToString();
			this.AllowHtml = System.Convert.ToBoolean(row["AllowHtml"]);
			this.ArtifactTypeID = System.Convert.ToInt32(row["ArtifactTypeID"]);
			this.ArtifactTypeTableName = row["ArtifactTypeTableName"].ToString();
			this.AssociativeArtifactTypeID = System.Convert.ToInt32(row["AssociativeArtifactTypeID"]);
			this.AvfColumnName = row["AvfColumnName"].ToString();
			this.AvfHeaderName = row["AvfHeaderName"].ToString();
			this.AvfId = System.Convert.ToInt32(row["AvfID"]);
			this.Category = (FieldCategory)System.Convert.ToInt32(row["FieldCategoryID"]);
			this.ColumnSource = (ColumnSourceType)System.Enum.Parse(typeof(ColumnSourceType), row["ColumnSource"].ToString());
			this.ConnectorFieldArtifactID = System.Convert.ToInt32(row["ConnectorFieldArtifactID"]);
			this.ConnectorFieldCategory = (FieldCategory)System.Convert.ToInt32(row["ConnectorFieldCategoryID"]);
			this.ConnectorFieldName = row["ConnectorFieldName"].ToString();
			this.DataSource = row["DataSource"].ToString();
			this.DisplayName = row["DisplayName"].ToString();
			this.EnableDataGrid = System.Convert.ToBoolean(row["EnableDataGrid"]);
			this.FieldArtifactId = System.Convert.ToInt32(row["FieldArtifactID"]);
			this.FieldType = (FieldType)System.Convert.ToInt32(row["FieldTypeID"]);
			this.IsLinked = System.Convert.ToBoolean(row["IsLinked"]);
			this.FieldCodeTypeID = System.Convert.ToInt32(row["FieldCodeTypeID"]);
			this.FieldIsArtifactBaseField = System.Convert.ToBoolean(row["FieldIsArtifactBaseField"]);
			this.FormatString = System.Convert.ToString(row["FormatString"]);
			this.IsUnicodeEnabled = System.Convert.ToBoolean(row["IsUnicodeEnabled"]);
			this.ParentFileFieldArtifactID = System.Convert.ToInt32(row["ParentFileFieldArtifactID"]);
			this.ParentFileFieldDisplayName = System.Convert.ToString(row["ParentFileFieldDisplayName"]);
			this.RelationalTableName = System.Convert.ToString(row["RelationalTableName"]);
			this.RelationalTableColumnName = System.Convert.ToString(row["RelationalTableColumnName"]);
			this.RelationalTableColumnName2 = System.Convert.ToString(row["RelationalTableColumnName2"]);
			this.SourceFieldName = row["SourceFieldDisplayName"].ToString();
			this.SourceFieldArtifactTypeID = System.Convert.ToInt32(row["SourceFieldArtifactTypeID"]);			
			this.SourceFieldArtifactTypeTableName = row["SourceFieldArtifactTypeTableName"].ToString();
			this.SourceFieldArtifactID = System.Convert.ToInt32(row["SourceFieldArtifactID"]);
			if (row.Table.Columns.Contains("ParentReflectionType"))
			{
				this.ParentReflectionType = (ParentReflectionType)System.Convert.ToInt32(row["ParentReflectionType"]);
				this.ReflectedFieldArtifactTypeTableName = System.Convert.ToString(row["ReflectedFieldArtifactTypeTableName"]);
				this.ReflectedFieldIdentifierColumnName = System.Convert.ToString(row["ReflectedFieldArtifactTypeIdentifierColumnName"]);
				this.ReflectedFieldConnectorFieldName = System.Convert.ToString(row["ReflectedFieldArtifactTypeConnectorFieldName"]);
				this.ReflectedConnectorIdentifierColumnName = System.Convert.ToString(row["ReflectedConnectorArtifactTypeIdentifierColumnName"]);
			}
			else
			{
				this.ParentReflectionType = ParentReflectionType.Empty;
				this.ReflectedFieldArtifactTypeTableName = string.Empty;
				this.ReflectedFieldIdentifierColumnName = string.Empty;
				this.ReflectedFieldConnectorFieldName = string.Empty;
				this.ReflectedConnectorIdentifierColumnName = string.Empty;
			}

			bool columnExists = row.Table.Columns.Contains("IsVirtualAssociativeArtifactType");
			if (columnExists)
			{
				this.IsVirtualAssociativeArtifactType = System.Convert.ToBoolean(row["IsVirtualAssociativeArtifactType"]);
			}
		}

		public ViewFieldInfo(ViewFieldInfo vfi)
		{
			this.CopyFromViewFieldInfo(vfi);
		}

		public string AllowFieldName
		{
			get
			{
				return this._allowFieldName;
			}

			set
			{
				this._allowFieldName = value;
			}
		}

		public bool AllowHtml
		{
			get
			{
				return this._allowHtml;
			}

			set
			{
				this._allowHtml = value;
			}
		}

		public int ArtifactTypeID
		{
			get
			{
				return this._artifactTypeID;
			}

			set
			{
				this._artifactTypeID = value;
			}
		}

		public string ArtifactTypeTableName
		{
			get
			{
				return this._artifactTypeTableName;
			}

			set
			{
				this._artifactTypeTableName = value;
			}
		}

		public int AssociativeArtifactTypeID
		{
			get
			{
				return this._associativeArtifactTypeID;
			}

			set
			{
				this._associativeArtifactTypeID = value;
			}
		}

		public string AvfColumnName
		{
			get
			{
				return this._avfColumnName;
			}

			set
			{
				this._avfColumnName = value;
			}
		}

		public string AvfHeaderName
		{
			get
			{
				return this._avfHeaderName;
			}

			set
			{
				this._avfHeaderName = value;
			}
		}

		public int AvfId
		{
			get
			{
				return this._avfId;
			}

			set
			{
				this._avfId = value;
			}
		}

		public FieldCategory Category
		{
			get
			{
				return this._category;
			}

			set
			{
				this._category = value;
			}
		}

		public ColumnSourceType ColumnSource
		{
			get
			{
				return this._columnSource;
			}

			set
			{
				this._columnSource = value;
			}
		}

		public int ConnectorFieldArtifactID
		{
			get
			{
				return this._connectorFieldArtifactID;
			}

			set
			{
				this._connectorFieldArtifactID = value;
			}
		}

		public FieldCategory ConnectorFieldCategory
		{
			get
			{
				return this._connectorFieldCategory;
			}

			set
			{
				this._connectorFieldCategory = value;
			}
		}

		public string ConnectorFieldName
		{
			get
			{
				return this._connectorFieldName;
			}

			set
			{
				this._connectorFieldName = value;
			}
		}

		public string DataSource
		{
			get
			{
				return this._dataSource;
			}

			set
			{
				this._dataSource = value;
			}
		}

		public string DisplayName
		{
			get
			{
				return this._displayName;
			}

			set
			{
				this._displayName = value;
			}
		}

		public bool EnableDataGrid
		{
			get
			{
				return this._enableDataGrid;
			}

			set
			{
				this._enableDataGrid = value;
			}
		}

		public int FieldArtifactId
		{
			get
			{
				return this._fieldArtifactId;
			}

			set
			{
				this._fieldArtifactId = value;
			}
		}

		public int FieldCodeTypeID
		{
			get
			{
				return this._fieldCodeTypeID;
			}

			set
			{
				this._fieldCodeTypeID = value;
			}
		}

		public bool FieldIsArtifactBaseField
		{
			get
			{
				return this._fieldIsArtifactBaseField;
			}

			set
			{
				this._fieldIsArtifactBaseField = value;
			}
		}

		public FieldType FieldType
		{
			get
			{
				return this._fieldType;
			}

			set
			{
				this._fieldType = value;
			}
		}

		public string FormatString
		{
			get
			{
				return this._formatString;
			}

			set
			{
				this._formatString = value;
			}
		}

		public bool IsLinked
		{
			get
			{
				return this._isLinked;
			}

			set
			{
				this._isLinked = value;
			}
		}

		public bool IsUnicodeEnabled
		{
			get
			{
				return this._isUnicodeEnabled;
			}

			set
			{
				this._isUnicodeEnabled = value;
			}
		}

		public bool IsVirtualAssociativeArtifactType
		{
			get
			{
				return this._isVirtualAssociativeArtifactType;
			}

			set
			{
				this._isVirtualAssociativeArtifactType = value;
			}
		}

		public int ParentFileFieldArtifactID
		{
			get
			{
				return this._parentFileFieldArtifactID;
			}

			set
			{
				this._parentFileFieldArtifactID = value;
			}
		}

		public string ParentFileFieldDisplayName
		{
			get
			{
				return this._parentFileFieldDisplayName;
			}

			set
			{
				this._parentFileFieldDisplayName = value;
			}
		}

		public ParentReflectionType ParentReflectionType
		{
			get
			{
				return this._parentReflectionType;
			}

			set
			{
				this._parentReflectionType = value;
			}
		}

		public string ReflectedConnectorIdentifierColumnName
		{
			get
			{
				return this._reflectedConnectorIdentifierColumnName;
			}

			set
			{
				this._reflectedConnectorIdentifierColumnName = value;
			}
		}

		public string ReflectedFieldArtifactTypeTableName
		{
			get
			{
				return this._reflectedFieldArtifactTypeTableName;
			}

			set
			{
				this._reflectedFieldArtifactTypeTableName = value;
			}
		}

		public string ReflectedFieldConnectorFieldName
		{
			get
			{
				return this._reflectedFieldConnectorFieldName;
			}

			set
			{
				this._reflectedFieldConnectorFieldName = value;
			}
		}

		public string ReflectedFieldIdentifierColumnName
		{
			get
			{
				return this._reflectedFieldIdentifierColumnName;
			}

			set
			{
				this._reflectedFieldIdentifierColumnName = value;
			}
		}

		public string RelationalTableColumnName
		{
			get
			{
				return this._relationalTableColumnName;
			}

			set
			{
				this._relationalTableColumnName = value;
			}
		}

		public string RelationalTableColumnName2
		{
			get
			{
				return this._relationalTableColumnName2;
			}

			set
			{
				this._relationalTableColumnName2 = value;
			}
		}

		public string RelationalTableName
		{
			get
			{
				return this._relationalTableName;
			}

			set
			{
				this._relationalTableName = value;
			}
		}

		public int SourceFieldArtifactID
		{
			get
			{
				return this._sourceFieldArtifactID;
			}

			set
			{
				this._sourceFieldArtifactID = value;
			}
		}

		public int SourceFieldArtifactTypeID
		{
			get
			{
				return this._sourceFieldArtifactTypeID;
			}

			set
			{
				this._sourceFieldArtifactTypeID = value;
			}
		}

		public string SourceFieldArtifactTypeTableName
		{
			get
			{
				return this._sourceFieldArtifactTypeTableName;
			}

			set
			{
				this._sourceFieldArtifactTypeTableName = value;
			}
		}

		public string SourceFieldName
		{
			get
			{
				return this._sourceFieldName;
			}

			set
			{
				this._sourceFieldName = value;
			}
		}

		public bool IsCodeOrMulticodeField
		{
			get
			{
				return this.FieldType == FieldType.Code || this.FieldType == FieldType.MultiCode;
			}
		}

		public bool IsMultiValueField
		{
			get
			{
				return this.FieldType == FieldType.Objects || this.Category == FieldCategory.MultiReflected;
			}
		}

		private void CopyFromViewFieldInfo(ViewFieldInfo vfi)
		{
			this.FieldArtifactId = vfi.FieldArtifactId;
			this.AvfId = vfi.AvfId;
			this.Category = vfi.Category;
			this.DisplayName = vfi.DisplayName;
			this.AvfColumnName = vfi.AvfColumnName;
			this.AvfHeaderName = vfi.AvfHeaderName;
			this.AllowFieldName = vfi.AllowFieldName;
			this.ColumnSource = vfi.ColumnSource;
			this.DataSource = vfi.DataSource;
			this.SourceFieldName = vfi.SourceFieldName;
			this.SourceFieldArtifactTypeID = vfi.SourceFieldArtifactTypeID;
			this.ConnectorFieldArtifactID = vfi.ConnectorFieldArtifactID;
			this.SourceFieldArtifactTypeTableName = vfi.SourceFieldArtifactTypeTableName;
			this.ConnectorFieldName = vfi.ConnectorFieldName;
			this.FieldType = vfi.FieldType;
			this.ConnectorFieldCategory = vfi.ConnectorFieldCategory;
			this.IsLinked = vfi.IsLinked;
			this.FieldCodeTypeID = vfi.FieldCodeTypeID;
			this.ArtifactTypeID = vfi.ArtifactTypeID;
			this.ArtifactTypeTableName = vfi.ArtifactTypeTableName;
			this.FieldIsArtifactBaseField = vfi.FieldIsArtifactBaseField;
			this.FormatString = vfi.FormatString;
			this.IsUnicodeEnabled = vfi.IsUnicodeEnabled;
			this.AllowHtml = vfi.AllowHtml;
			this.ParentFileFieldArtifactID = vfi.ParentFileFieldArtifactID;
			this.ParentFileFieldDisplayName = vfi.ParentFileFieldDisplayName;
			this.AssociativeArtifactTypeID = vfi.AssociativeArtifactTypeID;
			this.RelationalTableName = vfi.RelationalTableName;
			this.RelationalTableColumnName = vfi.RelationalTableColumnName;
			this.RelationalTableColumnName2 = vfi.RelationalTableColumnName2;
			this.SourceFieldArtifactID = vfi.SourceFieldArtifactID;

			// Reflected Object fields
			this.ParentReflectionType = vfi.ParentReflectionType;
			this.ReflectedFieldArtifactTypeTableName = vfi.ReflectedFieldArtifactTypeTableName;
			this.ReflectedFieldIdentifierColumnName = vfi.ReflectedFieldIdentifierColumnName;
			this.ReflectedFieldConnectorFieldName = vfi.ReflectedFieldConnectorFieldName;
			this.ReflectedConnectorIdentifierColumnName = vfi.ReflectedConnectorIdentifierColumnName;

			this.EnableDataGrid = vfi.EnableDataGrid;
			this.IsVirtualAssociativeArtifactType = vfi.IsVirtualAssociativeArtifactType;
		}
	}
}