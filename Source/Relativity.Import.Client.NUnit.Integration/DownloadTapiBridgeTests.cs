using System;
using System.Threading;
using NUnit.Framework;
using Relativity.Transfer;
using Relativity.Transfer.UnitTestFramework;

namespace kCura.WinEDDS.TApi.NUnit.Integration
{
    public class DownloadTapiBridgeTests : TapiBridgeTestsBase
	{
		private DownloadTapiBridge tapiBridge;

		protected override TapiBridgeBase NativeFileTransfer => tapiBridge;


		/// <summary>
		/// Tests an upload.
		/// </summary>
		[Test]
		public void ShouldDownloadTheFiles()
		{
			this.GivenTheTestInstance(TestEnvironment.OnPremisePrivateCloud);
			this.GivenTheWorkspaceId(true);
			this.GivenTheMaxFilesPerFolder(10);
			this.GivenTheNumberOfFiles(100);
			this.GivenTheAutoGeneratedDataset(this.instance.FileShareUncPath + "/NativeFileDownloadTest/" + Guid.NewGuid());
			this.GivenTheTargetPath(this.testDirectory.Directory);
			this.GivenTheNativeFileTransfer(TransferDirection.Download);
			this.WhenExecutingTheJob();
			this.ThenTheFilesWereTransferred();
		}

		protected override void CreateTapiBridge()
		{
			var parameters = new UploadTapiBridgeParameters
			{
				WebCookieContainer = this.cookieContainer,
				Credentials = this.credential,
				MaxFilesPerFolder = this.maxFilesPerFolder,
				TargetPath = this.targetPath,
				WebServiceUrl = this.relativityHost,
				WorkspaceId = this.workspaceId
			};

			this.tapiBridge = new DownloadTapiBridge(parameters, this.transferLog?.Object, CancellationToken.None);
		}

		protected override void WhenExecutingTheJob()
		{
			var order = 0;
			foreach (var sourcePath in this.sourcePaths)
			{
				this.tapiBridge.AddPath(new TransferPath
				{
					Order = order,
					SourcePath = sourcePath,
					TargetPath = tapiBridge.TargetPath
				});
			}

			this.NativeFileTransfer.WaitForTransferJob();
		}
	}
}