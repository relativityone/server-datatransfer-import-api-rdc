// -----------------------------------------------------------------------------------------------------
// <copyright file="DownloadTapiBridgeTests.cs" company="Relativity ODA LLC">
//   © Relativity All Rights Reserved.
// </copyright>
// <summary>
//   Represents <see cref="DownloadTapiBridge"/> tests.
// </summary>
// -----------------------------------------------------------------------------------------------------

namespace Relativity.Import.Client.NUnit.Integration
{
	using System;
	using System.Net;
	using System.Threading;

	using global::NUnit.Framework;

	using kCura.WinEDDS.TApi;

	using Relativity.Import.Export.TestFramework;
	using Relativity.Transfer;

	/// <summary>
	/// Represents <see cref="DownloadTapiBridge"/> tests.
	/// </summary>
	[TestFixture]
	[System.Diagnostics.CodeAnalysis.SuppressMessage(
		"Microsoft.Design",
		"CA1001:TypesThatOwnDisposableFieldsShouldBeDisposable",
		Justification = "The test class handles the disposal.")]
	public class DownloadTapiBridgeTests : TapiBridgeTestBase
	{
		private DownloadTapiBridge tapiBridge;

		protected override TapiBridgeBase NativeFileTransfer => this.tapiBridge;

		/// <summary>
		/// Tests the download bridge.
		/// </summary>
		[Test]
		[Category(TestCategories.Integration)]
		[Category(TestCategories.TransferApi)]
		public void ShouldDownloadTheFiles()
		{
			this.GivenTheMaxFilesPerFolder(10);
			this.GivenTheNumberOfFiles(100);
			this.GivenTheAutoGeneratedDataset(this.TestParameters.FileShareUncPath + "/NativeFileDownloadTest/" + Guid.NewGuid());
			this.GivenTheTargetPath(this.TempDirectory.Directory);
			GivenTheStandardConfigSettings();
			this.GivenTheNativeFileTransfer();
			this.WhenExecutingTheJob();
			this.ThenTheFilesWereTransferred();
		}

		protected override void CreateTapiBridge()
		{
			var parameters = new TapiBridgeParameters
			{
				Credentials = new NetworkCredential(this.TestParameters.RelativityUserName, this.TestParameters.RelativityPassword),
				TargetPath = this.TargetPath,
				WebCookieContainer = this.CookieContainer,
				WebServiceUrl = this.TestParameters.RelativityWebApiUrl.ToString(),
				WorkspaceId = this.TestParameters.WorkspaceId
			};

			this.tapiBridge = new DownloadTapiBridge(parameters, this.TransferLog?.Object, CancellationToken.None);
		}

		private void WhenExecutingTheJob()
		{
			var order = 0;
			foreach (var sourcePath in this.SourcePaths)
			{
				this.tapiBridge.AddPath(new TransferPath
				{
					Order = order,
					SourcePath = sourcePath,
					TargetPath = this.tapiBridge.TargetPath
				});
			}

			this.NativeFileTransfer.WaitForTransferJob();
		}
	}
}